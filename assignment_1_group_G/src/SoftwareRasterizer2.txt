#include "../include/SoftwareRasterizer.h"

#include <sstream>

SDL_Event SoftwareRasterizer::event;// static members need to be initiated in universal block
glm::mat4 SoftwareRasterizer::NDC_to_Screen_Matrix;

SoftwareRasterizer::SoftwareRasterizer()
{
}

SoftwareRasterizer::~SoftwareRasterizer()
{
}


void SoftwareRasterizer::init()
{
    int flags = 0;
    if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
    {
        std::cout << "SDL could not initialize! SDL_Error: " << SDL_GetError() << "\n";
    }
    else{

        int screenWidth = frameWidth * displayScale;
        int screenHeight = frameHeight * displayScale;
        win = SDL_CreateWindow("COL781", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screenWidth, screenHeight, SDL_WINDOW_SHOWN);
        if (win == NULL)
        {
            std::cout << "Window could not be created! SDL_Error: " << SDL_GetError() << "\n";
        }
        else {
            isRunning = true;
			surface = SDL_GetWindowSurface(win);
            framebuffer = SDL_CreateRGBSurface(0, frameWidth, frameHeight, 32, 0, 0, 0, 0);

            clearFramebuffer(glm::vec4(1,  1, 1, 1.0));
            NDC_to_Screen_Matrix[0] = glm::vec4(frameWidth/2,0.0f,0.0f,0.0f);
            NDC_to_Screen_Matrix[1] = glm::vec4(0.0f,-frameHeight/2,0.0f,0.0f);
            NDC_to_Screen_Matrix[2] = glm::vec4(0.0f, 0.0f, 1.0f, 0.0f);
            NDC_to_Screen_Matrix[3] = glm::vec4(frameWidth/2,frameHeight/2,0.0f,1.0f);

            // Define the Coordinates for the tick mark

            // glm::vec4 vertices[] = {
            //     glm::vec4(-0.8, 0.0, 0.0, 1.0),
            //     glm::vec4(-0.4, -0.8, 0.0, 1.0),
            //     glm::vec4(0.8, 0.8, 0.0, 1.0),
            //     glm::vec4(-0.4, -0.4, 0.0, 1.0)
            // };
            // glm::ivec3 indices[] = {
            //     glm::ivec3(0, 1, 3),
            //     glm::ivec3(1, 2, 3)
            // };
            // glm::vec4 colors[] = {
            //     glm::vec4(1.0, 0.0, 0.0, 1.0),
            //     glm::vec4(0.0, 1.0, 0.0, 1.0),
            //     glm::vec4(0.0, 0.0, 1.0, 1.0),
            //     glm::vec4(1.0, 1.0, 0.0, 1.0)
            // };
            
            // Define the Coordinates for Square

            glm::vec4 vertices[] = {
                glm::vec4(-0.8, -0.8, 0.0, 1.0),
                glm::vec4(-0.8, 0.8, 0.0, 1.0),
                glm::vec4(0.8, 0.8, 0.0, 1.0),
                glm::vec4(0.8, -0.8, 0.0, 1.0)
            };

            glm::ivec3 indices[] = {
                glm::ivec3(0, 1, 2),
                glm::ivec3(0, 2, 3)
            };

            glm::vec4 colors[] = {
                glm::vec4(1.0, 0.0, 0.0, 1.0),
                glm::vec4(0.0, 1.0, 0.0, 1.0),
                glm::vec4(0.0, 0.0, 1.0, 1.0),
                glm::vec4(1.0, 1.0, 0.0, 1.0)
            };

            glm::vec4 backgroundColor = glm::vec4(1.0, 1.0, 1.0, 1.0);
            int samplesPerPixel = 2;


            // Define the Coordinates for Triangles from the shape defined above

            for(auto i : indices){
                rasterTriangle(vertices[i[0]], vertices[i[1]], vertices[i[2]], colors[i[0]], colors[i[1]], colors[i[2]], samplesPerPixel, backgroundColor);
            }

            // temp = SDL_CreateRGBSurface(0, frameWidth, frameHeight, 32, 0, 0, 0, 0);

            // copyBuffer(temp,framebuffer);
            // for(int j = 0; j<frameHeight; j++){
            //     for(int i = 0; i<frameWidth ; i++){
            //         SuperSampling(i,j,2,2);
            //     }
            // }
            // copyBuffer(framebuffer,temp);

            SDL_BlitScaled(framebuffer, NULL, surface, NULL);
            SDL_UpdateWindowSurface(win);
            
        }

    }
}

void SoftwareRasterizer::copyBuffer(SDL_Surface* temp , SDL_Surface* framebuffer){
    Uint32 *pixels = (Uint32*)framebuffer->pixels;  
    Uint32 *pixels2 = (Uint32*)temp->pixels;  
    for(int i = 0; i<frameWidth*frameHeight; i++){
        pixels2[i] = pixels[i];
    }
}

void SoftwareRasterizer::handleEvents()
{

    SDL_PollEvent(&event);
    switch (event.type)
    {
    case SDL_QUIT:
        isRunning = false;
        break;
    default:
        break;
    }
}

void SoftwareRasterizer::update()
{
}


void SoftwareRasterizer::render()
{
}

void SoftwareRasterizer::saveFramebuffer() {
    IMG_SavePNG(framebuffer, outputFile);
}

void SoftwareRasterizer::clearFramebuffer(glm::vec4 colour) {
    Uint32 *pixels = (Uint32*)framebuffer->pixels;
    SDL_PixelFormat *format = framebuffer->format;
    Uint8 r = 0, g = 0, b = 0 , t = 0;
    if(colour[0]!=0){r = colour[0]*256-1;}
    if(colour[1]!=0){g = colour[1]*256-1;}
    if(colour[2]!=0){b = colour[2]*256-1;}
    if(colour[3]!=0){t = colour[3]*256-1;}

    for (int i = 0; i < frameWidth; i++) {
        for (int j = 0; j < frameHeight; j++) {
            Uint32 color = SDL_MapRGBA(format, r, g, b, t); 
            pixels[i + frameWidth*j] = color;
        }
    }
}

void SoftwareRasterizer::clean()
{
    SDL_FreeSurface(framebuffer);
    SDL_DestroyWindow(win);
    SDL_Quit();
    std::cout << "quit\n";
}

float area(int x1, int y1, int x2, int y2, int x3, int y3)
{
   return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2))/2.0);
}

bool isInside(int x1, int y1, int x2, int y2, int x3, int y3, int x, int y)
{  
   float A = area (x1, y1, x2, y2, x3, y3);
  
   float A1 = area (x, y, x2, y2, x3, y3);
  
   float A2 = area (x1, y1, x, y, x3, y3);
  
   float A3 = area (x1, y1, x2, y2, x, y);

   return (A == A1 + A2 + A3);
}

// Interpolate colors between vertices and find the color value at the point
glm::vec4 SoftwareRasterizer::interpolateColorOnTriangle(glm::vec4 vertex1, glm::vec4 vertex2, glm::vec4 vertex3, glm::vec4 color1, glm::vec4 color2, glm::vec4 color3, glm::vec4 point)
{
   float a1 = area(vertex2[0], vertex2[1], vertex3[0], vertex3[1], point[0], point[1]);
   float a2 = area(vertex1[0], vertex1[1], vertex3[0], vertex3[1], point[0], point[1]);
   float a3 = area(vertex1[0], vertex1[1], vertex2[0], vertex2[1], point[0], point[1]);
   float a = area(vertex1[0], vertex1[1], vertex2[0], vertex2[1], vertex3[0], vertex3[1]);
   
   return (a1 / a) * color1 + (a2 / a) * color2 + (a3 / a) * color3;
}

void SoftwareRasterizer::rasterTriangle(glm::vec4 vertex1, glm::vec4 vertex2,glm::vec4 vertex3, glm::vec4 colour1, glm::vec4 colour2, glm::vec4 colour3, int spp, glm::vec4 background_color) 
{
    glm::vec4 Bottom = NDC_to_Screen_Matrix*vertex1;
    glm::vec4 Middle = NDC_to_Screen_Matrix*vertex2;
    glm::vec4 Top = NDC_to_Screen_Matrix*vertex3;

    glm::vec4 BottomColour = colour1;
    glm::vec4 MiddleColour = colour2;
    glm::vec4 TopColour = colour3;

    // std::cout << glm::to_string(Bottom) << std::endl;

    int start_x = std::min(std::min(Bottom[0],Middle[0]),Top[0]);
    int start_y = std::min(std::min(Bottom[1],Middle[1]),Top[1]);
    int end_x = std::max(std::max(Bottom[0],Middle[0]),Top[0]);
    int end_y = std::max(std::max(Bottom[1],Middle[1]),Top[1]);

    Uint32 *pixels = (Uint32*)framebuffer->pixels;

    int t = 1;
    while (t < spp)
    {
        t *= 2;
    }

    for(int i = start_x; i<=end_x ;i++){
        for(int j = start_y; j<=end_y; j++){

            glm::vec4 color = glm::vec4(0,0,0,0);
            
            for (int pi = 0; pi < t; pi++)
            {
                for (int pj = 0; pj < t; pj++){
                    glm::vec4 currPoint = glm::vec4(i-0.5 + pi / t, j+0.5 + pj / t, 0, 1);
                    glm::vec4 currColor;
                    if (isInside(Bottom[0], Bottom[1], Middle[0], Middle[1], Top[0], Top[1], i, j))
                    {
                        currColor = interpolateColorOnTriangle(Bottom, Middle, Top, BottomColour, MiddleColour, TopColour, currPoint);
                    }
                    else
                    {
                        currColor = background_color;
                    }
                    color = color + currColor;
                    color = glm::vec4(color[0] / (t * t), color[1] / (t * t), color[2] / (t * t), color[3] / (t * t));
            }}
            Uint32 color2 = SDL_MapRGBA(framebuffer->format, color[0] * 256 - 1, color[1] * 256 - 1, color[2] * 256 - 1, color[3] * 256 - 1);
            pixels[i + frameWidth * j] = color2;
            
    }
}
}

void SoftwareRasterizer::SuperSampling(int x, int y, int width, int height){
    Uint32 *pixels = (Uint32 *)framebuffer->pixels;
    Uint32 *pixels2 = (Uint32 *)temp->pixels;
    Uint32 color = SDL_MapRGBA(framebuffer->format, 0, 0, 0, 255);
    int count = 0;
    for (int i = x; i < x + width; i++)
    {
        for (int j = y; j < y + height; j++)
        {
            if (pixels2[i + frameWidth * j] == color)
            {
                    count++;
            }
        }
    }
    if (count > 0)
    {
        pixels[x + frameWidth * y] = color;
    }
}

// void SoftwareRasterizer::SuperSampling(int i, int j, int width, int height){
//     int r = 0, g = 0, b = 0;

//     uint8_t *pixels = (uint8_t*)framebuffer->pixels;
//     Uint32 *pixels2 = (Uint32*)temp->pixels;
//     int start_1 = std::max(0,i-width);
//     int start_2 = std::max(0,j-height);
//     int end_1 = std::min(frameWidth,i+width);
//     int end_2 = std::min(frameHeight,j+height);

//     // add weights to this
//     // And why is it failing at corner

//     for(int s = start_1 ; s<end_1 ; s++){
//         for(int t = start_2; t < end_2; t++){
//             b += ((int) pixels[t*framebuffer->pitch +s*framebuffer->format->BytesPerPixel+0])/(1);
//             g += ((int) pixels[t*framebuffer->pitch +s*framebuffer->format->BytesPerPixel+1])/(1);
//             r += ((int) pixels[t*framebuffer->pitch +s*framebuffer->format->BytesPerPixel+2])/(1);
//         }
//     }

//     r /= (width*height);
//     g /= (width*height);
//     b /= (width*height);
//     pixels2[j*frameWidth + i] = SDL_MapRGBA(temp->format,r,g,b,255);

// }